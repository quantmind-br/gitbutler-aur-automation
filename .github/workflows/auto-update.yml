name: Auto Update GitButler AUR

on:
  schedule:
    # Executar a cada 6 horas
    - cron: '0 */6 * * *'
  workflow_dispatch: # Permitir execu√ß√£o manual

  # Webhook para ser chamado por servi√ßos externos
  repository_dispatch:
    types: [update-check]

env:
  AUR_REPO_NAME: gitbutler-appimage
  UPSTREAM_REPO: gitbutlerapp/gitbutler

jobs:
  check-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up SSH for AUR
        env:
          AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AUR_SSH_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts

          # Configure SSH
          cat >> ~/.ssh/config << EOF
          Host aur.archlinux.org
            HostName aur.archlinux.org
            User aur
            IdentityFile ~/.ssh/id_ed25519
            IdentitiesOnly yes
          EOF

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils fakeroot curl

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check for updates
        id: check_updates
        run: |
          echo "Checking for GitButler updates..."
          python3 check_updates.py

          # Verificar se houve mudan√ßas
          if ! git diff --quiet PKGBUILD .SRCINFO 2>/dev/null; then
            echo "updated=true" >> $GITHUB_OUTPUT
            NEW_VERSION=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version found: $NEW_VERSION"
          else
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "No updates needed"
          fi

      - name: Clone AUR repository
        if: steps.check_updates.outputs.updated == 'true'
        run: |
          git clone ssh://aur@aur.archlinux.org/${{ env.AUR_REPO_NAME }}.git aur-repo
          cd aur-repo

          # Copiar arquivos atualizados
          cp ../PKGBUILD .
          cp ../.SRCINFO .
          cp ../gitbutler-appimage.install .

      - name: Validate PKGBUILD
        if: steps.check_updates.outputs.updated == 'true'
        run: |
          cd aur-repo

          # Verifica√ß√£o b√°sica do PKGBUILD
          if ! grep -q "pkgver=${{ steps.check_updates.outputs.version }}" PKGBUILD; then
            echo "ERROR: Version mismatch in PKGBUILD"
            exit 1
          fi

          # Verificar se .SRCINFO est√° sincronizado
          if [ "$(stat -c %Y .SRCINFO)" -lt "$(stat -c %Y PKGBUILD)" ]; then
            echo "WARNING: .SRCINFO might be outdated"
          fi

      - name: Commit and push to AUR
        if: steps.check_updates.outputs.updated == 'true'
        run: |
          cd aur-repo

          git add PKGBUILD .SRCINFO gitbutler-appimage.install
          git commit -m "Update GitButler to v${{ steps.check_updates.outputs.version }}

          Automated update via GitHub Actions
          - Updated from upstream release
          - Tested build configuration
          - Updated dependencies if needed

          ü§ñ Generated with GitHub Actions"

          git push

      - name: Create release notes
        if: steps.check_updates.outputs.updated == 'true'
        run: |
          echo "## GitButler AUR Updated to v${{ steps.check_updates.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "- **New Version**: ${{ steps.check_updates.outputs.version }}" >> release_notes.md
          echo "- **Updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "- **Install**: \`yay -S gitbutler-appimage\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          echo "- Updated to latest GitButler release" >> release_notes.md
          echo "- Verified package builds successfully" >> release_notes.md
          echo "- Updated checksums and dependencies" >> release_notes.md

      - name: Send Discord notification
        if: steps.check_updates.outputs.updated == 'true' && secrets.DISCORD_WEBHOOK
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "üöÄ **GitButler AUR Updated!**\n\n**Version**: ${{ steps.check_updates.outputs.version }}\n**Install**: `yay -S gitbutler-appimage`\n**AUR**: https://aur.archlinux.org/packages/gitbutler-appimage",
                 "username": "AUR Bot"
               }' \
               "${{ secrets.DISCORD_WEBHOOK }}"

      - name: Send Slack notification
        if: steps.check_updates.outputs.updated == 'true' && secrets.SLACK_WEBHOOK
        run: |
          curl -X POST -H 'Content-type: application/json' \
               --data '{
                 "text": "üöÄ GitButler AUR updated to v${{ steps.check_updates.outputs.version }}!\nInstall: `yay -S gitbutler-appimage`"
               }' \
               "${{ secrets.SLACK_WEBHOOK }}"

      - name: Update repository
        if: steps.check_updates.outputs.updated == 'true'
        run: |
          # Copiar arquivos atualizados de volta
          cp aur-repo/PKGBUILD .
          cp aur-repo/.SRCINFO .

          # Commit no reposit√≥rio GitHub
          git add PKGBUILD .SRCINFO
          git commit -m "Update to v${{ steps.check_updates.outputs.version }}" || true
          git push || true

      - name: Create GitHub release
        if: steps.check_updates.outputs.updated == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "aur-v${{ steps.check_updates.outputs.version }}"
          release_name: "AUR Package v${{ steps.check_updates.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false

  # Job adicional para monitorar falhas
  notify-failure:
    runs-on: ubuntu-latest
    needs: check-and-update
    if: failure()

    steps:
      - name: Notify about failure
        if: secrets.DISCORD_WEBHOOK
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "‚ùå **GitButler AUR Update Failed**\n\nCheck the GitHub Actions logs for details.\n[View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                 "username": "AUR Bot"
               }' \
               "${{ secrets.DISCORD_WEBHOOK }}"